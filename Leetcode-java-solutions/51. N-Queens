class Solution{
    public static boolean ifvalid(char board[][], int col, int row){
        // checking for vertically upwards
        for(int i=row-1;i>=0;i--){
            if(board[i][col]=='Q'){
                return false;
            }
        }
        // checking for diagonal left
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--,j--){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        // checking for diagonal right
        for(int i=row-1, j=col+1; i>=0 && j<board.length;i--,j++){
            if(board[i][j]=='Q'){
                return false;
            }
        }
        return true;
    }
    public static void calculatenqueens(char board[][], int row, List<List<String>>a){
        // base case
        if(row==board.length){
            addindexes(board,a);
            return;
        }
        for(int j=0;j<board.length;j++){
            if(ifvalid(board, j, row)){
                board[row][j]='Q';
                calculatenqueens(board, row+1, a);
                board[row][j]='.';
            }
        }
    }
    public static void addindexes(char board[][], List<List<String>>a){
        List<String> c=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            String aa="";
            for(int j=0;j<board.length;j++){
                aa=aa+board[i][j];
            }
            c.add(aa);
        }
        a.add(c);
    }
    public List<List<String>> solveNQueens(int n){
        // making an char array
        char board[][]=new char[n][n];
        // initialising the board
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                board[i][j]='.';
            }
        }
        List<List<String>> a=new ArrayList<>();
        calculatenqueens(board, 0, a);
        return a;
    }
}