/**
 * Definition for a binary tree node.
 * public class TreeNode{
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(){}
 *     TreeNode(int val){this.val=val;}
 *     TreeNode(int val, TreeNode left, TreeNode right){
 *         this.val=val;
 *         this.left=left;
 *         this.right=right;
 *     }
 * }
 */
class Solution{
    public static void findpaths(List<String> answer,TreeNode root,String s){
        if(root==null){
            return;
        }
        s+=root.val;
        if(root.left==null && root.right==null){
            answer.add(s);
        }
        else{
            // if it is not a leaf node...
            s+="->";
            findpaths(answer,root.left,s);
            findpaths(answer,root.right,s);
        }
    }
    public List<String> binaryTreePaths(TreeNode root){
        // first step- we will check if there exists a node as a child of left, if not, we go to right..
        List<String> answer=new ArrayList<>();
        findpaths(answer,root,"");
        return answer;
    }
}