class Solution{
    public int findShortestSubArray(int[] nums){
        Map<Integer,Integer> mpp=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            mpp.put(nums[i],mpp.getOrDefault(nums[i],0)+1);
        }
        // we will check element with heighest frequency..
        int high=0;
        for(int freq:mpp.values()){
            if(freq>high){
                high=freq;
            }
        }
        // we will get heighest..
        // we will calculate first and last occurance and then range..
        int first=0; 
        int last=nums.length-1;
        int minLength=nums.length;
        for(int key:mpp.keySet()){
            if(mpp.get(key)==high){
                first=0;
                last=nums.length-1;
                // finding first occurrence
                while(nums[first]!=key){
                    first++;
                }
                // finding last occurrence
                while(nums[last]!=key){
                    last--;
                }
                minLength=Math.min(minLength,last-first+1);
            }
        }
        return minLength;
    }
}