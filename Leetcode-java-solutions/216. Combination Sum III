class Solution{
    public static void findsubsets(int arr[],int n,int k,List<List<Integer>>mainlist,List<Integer>seclist,int index,int sum){
        if(sum>n || seclist.size()>k || index>arr.length){
            return;
        }
        if(sum==n && seclist.size()==k){
            mainlist.add(new ArrayList<>(seclist));
            return;
        }
        if(index>=arr.length){
            return;
        }
        // take
        seclist.add(arr[index]);
        sum+=arr[index];
        findsubsets(arr,n,k,mainlist,seclist,index+1,sum);
        // not take
        seclist.remove(seclist.size()-1);
        sum-=arr[index];
        findsubsets(arr,n,k,mainlist,seclist,index+1,sum);
    }
    public List<List<Integer>> combinationSum3(int k, int n){
        int arr[]={1,2,3,4,5,6,7,8,9};
        List<List<Integer>> mainlist=new ArrayList<>();
        List<Integer> seclist=new ArrayList<>();
        findsubsets(arr,n,k,mainlist,seclist,0,0);
        return mainlist;
    }
}