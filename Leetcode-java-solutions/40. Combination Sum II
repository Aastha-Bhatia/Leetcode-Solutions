class Solution{
    public static void generate(int candidates[],List<List<Integer>> mainlist,List<Integer> seclist,int index,int target,int sum,Set<String>seen){
        if(sum>target){
            return;
        }
        if(sum==target){
            String key=seclist.toString();
            if(!seen.contains(key)){
                mainlist.add(new ArrayList<>(seclist));
                seen.add(key);
            }
            return;
        }
        if(index>=candidates.length){
           return; 
        }
        seclist.add(candidates[index]);
        sum+=candidates[index];
        generate(candidates,mainlist,seclist,index+1,target,sum,seen);
        seclist.remove(seclist.size()-1);
        sum-=candidates[index];
        int next=index+1;
        while(next<candidates.length && candidates[next]==candidates[index]){
            next++;
        }
        index=next;
        generate(candidates,mainlist,seclist,index,target,sum,seen);
    }
    public List<List<Integer>> combinationSum2(int[] candidates,int target){
        Arrays.sort(candidates);
        List<List<Integer>> mainlist=new ArrayList<>();
        List<Integer> seclist=new ArrayList<>();
        Set<String> seen=new HashSet<>();
        generate(candidates,mainlist,seclist,0,target,0,seen);
        return mainlist;
    }
}