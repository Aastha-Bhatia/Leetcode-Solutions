class Solution{
    int dp[][];
    public int solve(int i,int j,String word1,String word2){
        // Base Case
        if(i<0){
            return j+1;
        }
        if(j<0){
            return i+1;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        // if both are same we do not need to do any operation..
        if(word1.charAt(i)==word2.charAt(j)){
            return solve(i-1,j-1,word1,word2);
        }
        // if words are different..
        else{
            // option-1 insert
            int op1=1+solve(i,j-1,word1,word2);
            // option-2 replace
            int op2=1+solve(i-1,j-1,word1,word2);
            // option-3 delete
            int op3=1+solve(i-1,j,word1,word2);
            return dp[i][j]=Math.min(op1,Math.min(op2,op3));
        }
    }
    public int minDistance(String word1,String word2){
        int n=word1.length();
        int m=word2.length();
        dp=new int[n][m];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }
        return solve(n-1,m-1,word1,word2);
    }
}