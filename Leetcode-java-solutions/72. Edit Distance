// class Solution{
//     int dp[][];
//     public int solve(int i,int j,String word1,String word2){
//         // Base Case
//         if(i<0){
//             return j+1;
//         }
//         if(j<0){
//             return i+1;
//         }
//         if(dp[i][j]!=-1){
//             return dp[i][j];
//         }
//         // if both are same we do not need to do any operation..
//         if(word1.charAt(i)==word2.charAt(j)){
//             return solve(i-1,j-1,word1,word2);
//         }
//         // if words are different..
//         else{
//             // option-1 insert
//             int op1=1+solve(i,j-1,word1,word2);
//             // option-2 replace
//             int op2=1+solve(i-1,j-1,word1,word2);
//             // option-3 delete
//             int op3=1+solve(i-1,j,word1,word2);
//             return dp[i][j]=Math.min(op1,Math.min(op2,op3));
//         }
//     }
//     public int minDistance(String word1,String word2){
//         int n=word1.length();
//         int m=word2.length();
//         dp=new int[n][m];
//         for(int i=0;i<dp.length;i++){
//             Arrays.fill(dp[i],-1);
//         }
//         return solve(n-1,m-1,word1,word2);
//     }
// }

// using bottom up...
class Solution{
    int dp[][];
    public int minDistance(String word1,String word2){
        int n=word1.length();
        int m=word2.length();
        dp=new int[n+1][m+1];
        for(int i=0;i<=m;i++){
            dp[0][i]=i;
        }
        for(int j=0;j<=n;j++){
            dp[j][0]=j;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                // if both are same we do not need to do any operation..
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j]=dp[i-1][j-1];
                }
            // if words are different..
            else{
                // option-1 insert
                int op1=1+dp[i][j-1];
                // option-2 replace
                int op2=1+dp[i-1][j-1];
                // option-3 delete
                int op3=1+dp[i-1][j];
                dp[i][j]=Math.min(op1,Math.min(op2,op3));
                }
            }
        }
        return dp[n][m];
    }
}