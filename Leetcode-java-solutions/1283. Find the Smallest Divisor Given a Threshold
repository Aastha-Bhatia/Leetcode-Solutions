class Solution {
    public int smallestDivisor(int[] nums, int threshold){
        int max=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>max){
                max=nums[i];
            }
        }
        // we will get our max
        // now range will surely be between 1 and max number
        // i am using binary search because the range can be really big too
        int start=1;
        int end=max;
        int ans=max;
        while(start<=end){
            int mid=start+(end-start)/2;
            int sum=0;
            for(int i=0;i<nums.length;i++){
                sum+=(int)Math.ceil((double)nums[i]/mid);
            }
            if(sum<=threshold){
                ans=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }    
        return ans;
    }
}