class Solution{
    public int minDays(int[] bloomDay,int m,int k){
        if((long)m*k>bloomDay.length){
            return -1;
        }
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<bloomDay.length;i++){
            min=Math.min(min,bloomDay[i]);
            max=Math.max(max,bloomDay[i]);
        }
        int ans=-1;
        int low=min;
        int high=max;
        while(low<=high){
            int mid=low+(high-low)/2;
            int arr[]=new int[bloomDay.length];
            for(int i=0;i<bloomDay.length;i++){
                if(mid>=bloomDay[i]){
                    arr[i]=1;
                }
                else{
                    arr[i]=0;
                }
            }
            // checking how many bouque are possible...
            int total=0;
            int count=0;
            for(int i=0;i<arr.length;i++){
                if(arr[i]==1){
                    count++;
                }
                else{
                    total+=count/k;
                    count=0;
                }
            }
            total+=count/k;
            if(total>=m){
                // found..
                ans=mid;
                // trying to find more less..
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }
}